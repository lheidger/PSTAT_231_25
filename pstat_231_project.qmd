---
title: "231 Project"
author: "Lily Heidger"
format: 
  html:
    code-fold: show
    toc: true
    embed-resources: true
editor: visual
theme: lumen
execute:
  echo: true
  message: false
  warning: false
---

```{r}
.libPaths("~/rlibs")
library(osmdata)
library(here)
library(dplyr)
library(janitor)
library(sf)
library(mapview)
library(terra)
library(sf)
library(ggplot2)
library(tidycensus)
library(tidyverse)
library(knitr)
library(kableExtra)
library(tidymodels)
library(parsnip)
library(yardstick)
```

![\*Fig 1. A bike path lined with trees (Credit: <https://x.com/stewart/status/599780176667357184?lang=ar>)\*](tree2.jpeg){width="666"}

# Introduction

Previous literature in urban studies and environmental justice has identified a correlation between areas with lower income individuals, lower education levels, or higher percentages of minority populations and overall lower urban tree canopy rates (SOURCE). Additionally, many of these same populations also have higher percentages of households or individuals without cars, meaning residents rely on biking, walking, and public transit (SOURCE). However, many lower-income neighborhoods lack the bike infrastructure to support the population that relies on biking. This project investigates the relationship between tree canopy and various socioeconomic variables, exploring whether a model of these variables can accurately predict the bike infrastructure on individual street segments.

Describes the data, the research questions, provides any background readers need to understand your project, etc.

## Study Area: San Jose , California

![\*Fig 2. San Jose, California.(Credit: https://climatecheck.com/california/san-jose)\*](sanjose.png)

San Jose is a city located south of the San Francisco Bay in Northern California. It spans 178 square miles and hosts about 970,000 residents. Over 38% of residents identify as Asian, 31% Hispanic or Latino, 29% White, and 3% Black. Nearly 8% of residents fall below the poverty level (US Census, 2023).

## Data

### Tree Canopy data

![\*Fig 3. US Forest Service Tree Canopy Data.(Credit: https://climatecheck.com/california/san-jose)\*](tree_data_pic.png) The primary predictor and focus of this research question involves tree canopy cover data from the US Forest service, found [here](https://usfs.hub.arcgis.com/maps/dc0b6780a9ea4b8ea88057a3b26f7025/explore?location=34.419949%2C-119.277200%2C5.66). These data are pre-processed remote sensing TIF files indicating where tree canopy cover is found. The data were most recently updated in 2021.

### Census variable data

The remaining predictors in this project are sourced from the 2020 Census, found [here](https://www.census.gov/programs-surveys/decennial-census/decade/2020/2020-census-results.html). These Census data are block group scale, with the selected variables as follows:

-   Median household income

-   \% high school educated

-   \% college educated

-   \% who commute via bicycle

-   \% who commute via bicycle who are male

-   

### OpenStreetMap data

![\*Fig 4. OpenStreetMap data interface. (Credit: https://wiki.openstreetmap.org/wiki/Map_Data_layer)\*](osm_pic.png){width="711"}

OSM data are open-source urban infrastructure and point-of-interest (POI) data, publicly available [here](https://www.openstreetmap.org/#map=4/-39.27/-73.60) and accessed in this project with the `osmdata` API. For this project, bike infrastructure data are accessed and cleaned, ranking the categorical infrastructure types in an ordinal and numerical column called comfort_level:

-   ‚ÄúSeparate‚Äù (AKA separated bike or multiuse path) = 5

-   ‚ÄúTrack‚Äù (AKA buffered or protected bike lane) = 4

-   ‚ÄúLane‚Äù (AKA painted bike lane) = 3

-   ‚ÄúShared_lane‚Äù (AKA ‚Äúsharrow‚Äù or shared roadway) = 2

-   ‚ÄúNone‚Äù (AKA no bike infrastructure) = 1

## Research Questions

With these data in mind, our research questions are as follows:

-   Do areas with higher urban canopy percentages also have more bike infrastructure?

-   Can urban canopy serve as a reliable predictor of bike infrastructure at the street-level?

### EDA

This should contain at least 3 to 5 visualizations and/or tables and their interpretation/discussion. At minimum you should create a univariate visualization of the outcome(s), a bi-variate or multivariate visualization of the relationship(s) between the outcome and select predictors, etc. Part of an EDA involves asking questions about your data and exploring your data to find the answers.

### Tree Canopy Data

```{r}
sj_boundary <- st_read(here("PSTAT_231_25", "data", "san_jose", "urbanboundary", "San_Jose.shp"))
sf_boundary <- st_read(here("PSTAT_231_25","data", "San_Francisco_and_Oakland", "urbanboundary", "San_Francisco_and_Oakland.shp"))

sj_canopy <- rast(here("PSTAT_231_25", "data", "san_jose", "urbancanopy2022", "San_Jose_canopy2022.tif"))
colnames(sj_canopy)

saveRDS(sj_boundary, here("data", "sj_boundary.rds"))
saveRDS(sf_boundary, here("data", "sf_boundary.rds"))


```

### Osm Data

(ChatGPT used to learn how to use `osmdata`)

```{r}
# Define the area of interest (San Jose)
san_jose <- getbb("San Jose, California")

# Get all streets in San Jose
all_streets <- san_jose %>%
  opq() %>%
  add_osm_feature(key = "highway", 
                  value = c("motorway", "trunk", "primary", "secondary", 
                            "tertiary", "residential", "unclassified", 
                            "service", "living_street")) %>%
  osmdata_sf()

# Extract the lines (street segments)
streets_sf <- all_streets$osm_lines
```

```{r}
# Clean and prepare the data
streets_clean <- streets_sf %>%
  select(osm_id, name, highway, cycleway, `cycleway:left`, `cycleway:right`, 
         bicycle, maxspeed, geometry) %>%
  mutate(
    bike_infra = case_when(
      # üîµ Bike path
      cycleway == "separate" ~ "bike path",
      
      # üü¢ Buffered lane
      cycleway == "track" | `cycleway:left` == "track" ~ "buffered lane",
      
      # üü° Lane
      cycleway == "lane" | 
        `cycleway:left` == "lane" | 
        `cycleway:right` == "lane" | 
        `cycleway:right` == "lane" ~ "lane",
      
      # üü† Sharrow
      cycleway == "shared_lane" |
        `cycleway:left` == "shared_lane" |
        `cycleway:right` == "shared_lane" ~ "sharrow",
      
      # ‚ö™ None
      cycleway %in% c("no", "opposite_lane") |
        `cycleway:left` == "no" |
        `cycleway:right` == "no" ~ "none",
      
      # Default fallback
      TRUE ~ "none"
    )
  )

# For visualization
ggplot(streets_clean, aes(bike_infra))+
  geom_bar()


# ggplot() +
#   geom_sf(data = streets_clean, aes(color = bike_infra), size = 0.8) +
#   scale_color_brewer(palette = "Set1") +
#   theme_minimal() +
#   labs(title = "San Jose Streets with Bike Infrastructure", 
#        color = "Bike Infrastructure Type")

streets_clean %>%
  count(bike_infra) %>%
  arrange(desc(n))


streets_clean <- streets_clean %>%
  mutate(
    maxspeed = as.numeric(gsub("[^0-9.]", "", maxspeed)) 
  ) %>%
  filter(maxspeed <= 60 | is.na(maxspeed)) %>% select(-`cycleway:left`, -`cycleway:right`)

#st_write(streets_clean, "5san_jose_streets_clean.gpkg")

```

### Read in clean tree and bike data

After loading and cleaning the intial tree canopy data and OSM data, I saved both filed and uploaded them to ArcGIS Pro for further data wrangling. I first buffered each of the street segments by 25 meters to evaluate the street trees surrounding each street segment. Then, because the tree canopy data are raster data, I used the zonal statistics tool to analyze and assign the number of tree canopy pixels within each buffer and assign that value to the subsequent segment. I then calculated the area in m2 of each segment and divided the pixel value by the area to calculate percent canopy coverage for each segment. I then uploaded the dataset back into R. 

```{r}
sj_buffer <- st_read(here("PSTAT_231_25","data", "City_Limits", "main_Buffer4_Clip.shp"))

sj_city_bound <- st_read(here("PSTAT_231_25","data", "City_Limits.shp"))
# Map canopy density on each buffered street segment
#mapview(sj_buffer["canopy_den"])

saveRDS(sj_buffer, here("PSTAT_231_25","data", "sj_buffer.rds"))
sj_buffer <- readRDS(here("PSTAT_231_25","data", "sj_buffer.rds"))

```

San Jose City Limits accessed from https://gisdata-csj.opendata.arcgis.com/search?tags=boundaries

### Box plots

Now we'll explore some basic box plots to look and see if there is any correlation between canopy density and bike infrastructure. First, we have to make bike infrastructure an ordinal, numeric field.

```{r}
sj_buffer_clean <- sj_buffer %>% mutate(
    comfort_level = case_when(
      bike_infra == "bike path" ~ "5",

      bike_infra == "buffered lane" ~ "4",
      
      bike_infra == "lane" ~ "3",
      
      bike_infra == "sharrow" ~ "2",
      
      bike_infra == "none" ~ "1"))

as.numeric(sj_buffer_clean$comfort_level)


ggplot(sj_buffer_clean, aes(x = factor(comfort_level), y = canopy_den)) +
  geom_boxplot(fill = "lightblue") +
  labs(
    x = "Bike Infrastructure",
    y = "Tree Canopy Density",
    title = "Canopy Density by Bike Infrastructure Comfort Level"
  ) +
  theme_minimal()

```

ANALYZE BOXPLOTS


## Census data

```{r}
options(tigris_use_cache = TRUE)

sj_blocks <- get_decennial(
  geography = "block group",
  variables = "P1_001N",  # Total population
  state = "CA",
  county = "Santa Clara",
  year = 2020,
  geometry = TRUE
)


#st_write(sj_blocks, "santa_clara_census_blocks.gpkg")

sj_city_bound <- st_transform(sj_city_bound, 4326)
sj_blocks <- st_transform(sj_blocks, 4326)


sj_blocks_clip <- st_intersection(sj_blocks, sj_city_bound)
```

```{r}
set.seed(123)  # For reproducibility

sj_sample <- sj_buffer_clean %>%
  dplyr::slice_sample(n = 10000)

sj_sample <- st_transform(sj_sample, 4326)


# 1. Get ACS data
ca_tracts <- get_acs(
  geography = "tract",
  variables = c(
    "B19013_001",   # Median household income
    "B15003_017",   # College education
    "B15003_022",   # High school graduate
    "B08301_001",   # Total commuters
    "B08301_019",   # Bicycle commuters
    "B02001_003",   # Black or African American
    "B01003_001",   # Total population
    "B03003_003",   # Hispanic or Latino
    "B17001_002",   # Below poverty level
    "B21001_002"    # Veterans
  ),
  state = "CA",
  county = "Santa Clara",
  year = 2020,
  geometry = TRUE
)

# 2. Pivot wider once
ca_tracts <- ca_tracts %>%
  select(GEOID, NAME, variable, estimate, geometry) %>%
  pivot_wider(
    names_from = variable,
    values_from = estimate
  )

# 3. Now rename and calculate percentages
tract_data <- ca_tracts %>%
  st_drop_geometry() %>%
  rename(
    income_med = B19013_001,
    educ_college = B15003_017,
    educ_high_school = B15003_022,
    commuters_total = B08301_001,
    bicycle_commuters = B08301_019,
    pop_black = B02001_003,
    pop_total = B01003_001,
    pop_hispanic = B03003_003,
    pop_poverty = B17001_002,
    pop_veteran = B21001_002
  ) %>%
  mutate(
    educ_high_school_perc = educ_high_school / pop_total,
    educ_college_perc = educ_college / pop_total,
    bicycle_perc = bicycle_commuters / commuters_total,
    pct_black = pop_black / pop_total,
    pct_hispanic = pop_hispanic / pop_total,
    pct_poverty = pop_poverty / pop_total,
    pct_veteran = pop_veteran / pop_total
  ) %>%
  left_join(
    ca_tracts %>% select(GEOID, geometry),
    by = "GEOID"
  ) %>%
  st_as_sf()

tract_data <- st_transform(tract_data, st_crs(streets_buffers))


# 4. Perform the interpolation
streets_with_demographics <- cbind(
  sj_sample %>% 
    dplyr::select(osm_id, name),
  
  st_interpolate_aw(
    tract_data[c(
      "income_med",
      "educ_high_school_perc",
      "educ_college_perc",
      "bicycle_perc",
      "pct_black",
      "pct_hispanic",
      "pct_poverty",
      "pct_veteran"
    )],
    streets_buffers,
    extensive = FALSE,  # FALSE for percentages/rates
    keep_NA = TRUE
  ) %>%
    st_drop_geometry()
)

```

\[ChatGPT used to determine how to randomly sample my original sf object due to computational limitations.\]

## Merging Datasets

```{r}
sj_buffer_clean <- st_transform(sj_buffer_clean, 4326)

# Ensure both are valid
sj_buffer <- st_make_valid(sj_buffer)
sj_blocks <- st_make_valid(sj_blocks)



streets_blocks_intersection <- st_intersection(sj_buffer, sj_blocks)

# Calculate length of each street segment within each block
streets_blocks_intersection$segment_length <- st_length(streets_blocks_intersection)

# Group by street segment ID and calculate population density
streets_population <- streets_blocks_intersection %>%
  group_by(osm_id) %>%
  summarize(
    total_length = sum(segment_length),
    weighted_population = sum(P1_001N * as.numeric(segment_length) / total_length),
    population_density = weighted_population / total_length
  )

streets_with_population <- streets_clean %>%
  left_join(streets_population, by = "osm_id")



osm_census <- left_join(
  sj_buffer_clean,
  st_drop_geometry(streets_with_demographics),
  by = "osm_id"
)

saveRDS(osm_census, here("osm_census.rds"))

```

\[[Claude LLM](https://claude.ai/) used to help build code for accurately assigning population weighting to street segments\]

# Data Splitting and Cross-Validation

Describe your process of splitting data into training, test, and/or validation sets. Describe the process of cross-validation. Remember to write for a general audience. Act as if your project will be read by people new to machine learning.

```{r}
osm_census <- readRDS(here("osm_census.rds"))
osm_census_split <- initial_split(osm_census, prop = 0.80, strata = comfort_level)

osm_census_train <- training(osm_census_split)
osm_census_test <- testing(osm_census_split)
```

# Model Fitting

Describe the types of models you fit, their parameter values, and the results

# Model Selection and Performance

A table and/or graph describing the performance of your best-fitting model on testing data. Describe your best-fitting model however you choose, and the quality of its predictions, etc

# Conclusion

Discusses the outcome(s) of models you fit. Which models performed well, which performed poorly? Were you surprised by model performance? Next steps? General conclusions?
